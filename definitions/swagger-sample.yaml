swagger: "2.0"
info:
  version: 1.0.2
  title: Scaffolding
  description: Scaffolding Microservice
basePath: "/"
consumes:
  - application/json
produces:
  - application/json
schemes:
  - https
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  "/accounts/{id}":
    get:
      x-flix-vue-api:
        corp: true
      tags:
        - Accounts
      summary: Returns account information by Id
      description: Returns account information associated with the ID requested
      operationId: getAccountById
      produces:
        - application/json
        - application/xml
      parameters:
        - $ref: "#/parameters/headers"
        - $ref: "#/parameters/uniqueId"
      responses:
        "200":
          $ref: "#/responses/200"
        "204":
          $ref: "#/responses/204"
        "400":
          $ref: "#/responses/400"
        "403":
          $ref: "#/responses/403"
        "404":
          $ref: "#/responses/404"
        "409":
          $ref: "#/responses/409"
        "422":
          $ref: "#/responses/422"
        "500":
          $ref: "#/responses/500"
      deprecated: false
    delete:
      x-flix-vue-api:
        corp: true
      tags:
        - Accounts
      summary: Delete account by id
      description: Delete account by id
      operationId: deleteAccountById
      produces:
        - application/json
        - application/xml
      parameters:
        - $ref: "#/parameters/headers"
        - $ref: "#/parameters/uniqueId"
      responses:
        "200":
          $ref: "#/responses/200"
        "204":
          $ref: "#/responses/204"
        "400":
          $ref: "#/responses/400"
        "403":
          $ref: "#/responses/403"
        "404":
          $ref: "#/responses/404"
        "409":
          $ref: "#/responses/409"
        "422":
          $ref: "#/responses/422"
        "500":
          $ref: "#/responses/500"
      deprecated: false
    put:
      x-flix-vue-api:
        corp: true
      tags:
        - Accounts
      summary: Update account
      description: Update account
      operationId: updateAccount
      produces:
        - application/json
        - application/xml
      parameters:
        - $ref: "#/parameters/headers"
        - $ref: "#/parameters/uniqueId"
        - name: body
          description: Account object
          in: body
          required: true
          schema:
            $ref: "#/definitions/accounts"
      responses:
        "200":
          $ref: "#/responses/200"
        "204":
          $ref: "#/responses/204"
        "400":
          $ref: "#/responses/400"
        "403":
          $ref: "#/responses/403"
        "404":
          $ref: "#/responses/404"
        "409":
          $ref: "#/responses/409"
        "422":
          $ref: "#/responses/422"
        "500":
          $ref: "#/responses/500"
      deprecated: false
  "/accounts":
    get:
      security:
        - Bearer: []
      x-flix-vue-api:
        corp: true
      tags:
        - Accounts
      summary: Returns accounts
      description: Returns accounts requested
      operationId: getAccounts
      produces:
        - application/json
        - application/xml
      parameters:
        - $ref: "#/parameters/headers"
        - $ref: "#/parameters/skip"
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/sort"
      responses:
        "200":
          $ref: "#/responses/200"
        "204":
          $ref: "#/responses/204"
        "400":
          $ref: "#/responses/400"
        "403":
          $ref: "#/responses/403"
        "404":
          $ref: "#/responses/404"
        "409":
          $ref: "#/responses/409"
        "422":
          $ref: "#/responses/422"
        "500":
          $ref: "#/responses/500"
      deprecated: false
    post:
      x-flix-vue-api:
        corp: true
      tags:
        - Accounts
      summary: Create account
      description: Create account
      operationId: createAccounts
      produces:
        - application/json
        - application/xml
      parameters:
        - $ref: "#/parameters/headers"
        - name: body
          description: Account object
          in: body
          required: true
          schema:
            $ref: "#/definitions/accounts"
      responses:
        "200":
          $ref: "#/responses/200"
        "204":
          $ref: "#/responses/204"
        "400":
          $ref: "#/responses/400"
        "403":
          $ref: "#/responses/403"
        "404":
          $ref: "#/responses/404"
        "409":
          $ref: "#/responses/409"
        "422":
          $ref: "#/responses/422"
        "500":
          $ref: "#/responses/500"
      deprecated: false
  "/accounts/search/{type}":
    get:
      x-flix-vue-api:
        corp: true
      tags:
        - Accounts
      summary: Search for accounts based on keyword
      description: Search for accounts based on keyword
      operationId: searchAccountsByKeyword
      produces:
        - application/json
        - application/xml
      parameters:
        - $ref: "#/parameters/headers"
        - $ref: "#/parameters/searchtype"
        - $ref: "#/parameters/searchcriteria"
        - $ref: "#/parameters/skip"
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/sort"
      responses:
        "200":
          $ref: "#/responses/200"
        "204":
          $ref: "#/responses/204"
        "400":
          $ref: "#/responses/400"
        "403":
          $ref: "#/responses/403"
        "404":
          $ref: "#/responses/404"
        "409":
          $ref: "#/responses/409"
        "422":
          $ref: "#/responses/422"
        "500":
          $ref: "#/responses/500"
      deprecated: false
definitions:
  accounts:
    properties:
      user_id:
        type: string
      group_id:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      address1:
        type: string
      address2:
        type: string
      city:
        type: string
      state:
        type: string
      country:
        type: string
      zipCode:
        type: string
      phone:
        type: string
      mobile:
        type: string
      email:
        type: string
      website:
        type: string
      facebook:
        type: string
      twitter:
        type: string
      instagram:
        type: string
      snapchat:
        type: string
      enabled:
        default: true
        type: boolean
    required:
      - id
      - authentication_id
      - group_id
parameters:
  uniqueId:
    name: id
    description: Resource Unique Id
    in: path
    required: true
    type: string
  userId:
    name: user_id
    description: Resource User Id
    in: path
    required: true
    type: string
  headers:
    name: x-session-token
    description: User session token provided by the server
    in: header
    required: true
    type: string
  encryptedheaders:
    name: x-unique-token
    description: User session token provided by the server
    in: header
    required: true
    type: string
  skip:
    name: skip
    in: query
    description: The number of items to skip before starting to collect the result set.
    required: false
    type: integer
    default: 0
  limit:
    name: limit
    in: query
    description: The number of items to return
    required: false
    type: integer
    default: 10
  sort:
    name: sort
    in: query
    description: "Index field in which to sort off of. Use a -{field_name} for descending sort."
    required: false
    type: string
    default: "id"
  searchtype:  
    name: type
    in: path
    description: "Type of search [Single or Multiple]"
    required: true
    type: string  
  searchcriteria:  
    name: criteria
    in: query
    description: "Search keywords"
    required: true
    type: string  
responses:
  200:
    description: Ok - The request has succeeded.
    schema:
      type: object
      required:
        - statusCode
        - result
        - message
      properties:
        statusCode:
          type: number
        result: {}
        message:
          type: string
      example:
        statusCode: 200
        result: [{}]
        message: OK
  201:
    description: Created - The request has been fulfilled and has resulted in one or more new resources being created.
    schema:
      type: object
      required:
        - statusCode
        - result
        - message
      properties:
        statusCode:
          type: number
        result: {}
        message:
          type: string
      example:
        statusCode: 201
        result: [{}]
        message: The request has been fulfilled and has resulted in one or more new resources being created.
  204:
    description: No Content - The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.
    schema:
      type: object
      required:
        - statusCode
        - result
        - message
      properties:
        statusCode:
          type: number
        result: {}
        message:
          type: string
      example:
        statusCode: 204
        result: [{}]
        message: The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.
  400:
    description: Bad Request - The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
    schema:
      type: object
      required:
        - statusCode
        - result
        - message
      properties:
        statusCode:
          type: number
        result: {}
        message:
          type: string
      example:
        statusCode: 400
        result: [{}]
        message: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
  403:
    description: Forbidden - The server understood the request but refuses to authorize it.
    schema:
      type: object
      required:
        - statusCode
        - result
        - message
      properties:
        statusCode:
          type: number
        result: {}
        message:
          type: string
      example:
        statusCode: 403
        result: [{}]
        message: The server understood the request but refuses to authorize it.
  404:
    description: Not found - The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
    schema:
      type: object
      required:
        - statusCode
        - result
        - message
      properties:
        statusCode:
          type: number
        result: {}
        message:
          type: string
      example:
        statusCode: 404
        result: [{}]
        message: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
  409:
    description: Conflict - The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request.
    schema:
      type: object
      required:
        - statusCode
        - result
        - message
      properties:
        statusCode:
          type: number
        result: {}
        message:
          type: string
      example:
        statusCode: 409
        result: [{}]
        message: The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request.
  422:
    description: Unprocessable Entity - The server understands the content type of the request entity.
    schema:
      type: object
      required:
        - statusCode
        - result
        - message
      properties:
        statusCode:
          type: number
        result: {}
        message:
          type: string
      example:
        statusCode: 422
        result: [{}]
        message: Unprocessable Entity - The server understands the content type of the request entity.
  500:
    description: Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.
    schema:
      type: object
      required:
        - statusCode
        - result
        - message
      properties:
        statusCode:
          type: number
        result: {}
        message:
          type: string
      example:
        statusCode: 500
        result: [{}]
        message: The server encountered an unexpected condition that prevented it from fulfilling the request.
x-nginx-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: "http://localhost:8081"
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
